import prefs
import datetime
from stuff import *
import json
from bot_instance import *
import tools_package.tools as tools

def smart_response(TOOLSET=tools.TOOLS, tool_choice="auto", 
                   TEMP=prefs.TEMPERATURE, messages=None, system_message=None):
    try:
        print(f"{GREEN}Smart message launched{RESET}")
        current_datetime = datetime.datetime.now(prefs.timezone).strftime('%H:%M:%S')
        with open("static_storage/conversation.json", "r", encoding="utf-8") as f:
            conversation = json.load(f)
        if not system_message:
            system_message = {
                'role': 'system',
                'content': f"""Current time: {current_datetime}
                {prefs.system_msg()}
                """
            }
        if not messages:
            messages = [system_message, *conversation]
        client.api_key = prefs.open_r_key()
        
        print(f"{GREEN}Ready to send response{RESET}")
        # print(prefs.MODEL())
        # print(messages)
        response = client.chat.completions.create(
            model=prefs.MODEL(),
            messages=messages,
            tools=TOOLSET,
            tool_choice=tool_choice,
            temperature=TEMP,
            frequency_penalty=2
        )
        # print(response)
        if response.choices[0].finish_reason == 'error':
            bot.send_message(
                prefs.TST_chat_id,
                f"üîá\n```API Error: {response}```",
                parse_mode="Markdown"
            )
            return "error"
        
        if not response.choices:
            bot.send_message(
                prefs.TST_chat_id,
                f"üîá\n```API Error: {response}```",
                parse_mode="Markdown"
            )
            return
        message = response.choices[0].message
        plain_text = message.content
        tool_calls = message.tool_calls
        tools_called = []
        if tool_calls:
            
            #  vars to return into a conversation
            call_request = []
            call_response = []    
              
            for call in tool_calls:
                func_name = call.function.name
                func_args = call.function.arguments

                this_call = {
                                'id' : str(call.id),
                                "type" : str(call.type),
                                "function":{
                                    "name" : str(func_name),
                                    "arguments" : str(func_args)
                                }
                            }
                call_request.append(this_call)
            
            for call in tool_calls:
                func_name = call.function.name
                func_args = call.function.arguments
                #! tool execution
                try:                                
                    result = tools.execute_tool(func_name, func_args)   
                    # save a function call only on success
                    tools_called.append(func_name)
                except Exception as e:
                    print(RED, e , RESET)
                    error_msg = f"Tool {func_name} failed: {str(e )}"
                    bot.send_message(prefs.TST_chat_id, f"üü†\n```{error_msg}```", parse_mode="Markdown")
                    result = e
                
                call_response.append(
                    {
                        "role": "tool",
                        "name": func_name,
                        "tool_call_id": call.id,
                        "content": str(result),
                    }
                )
            conversation.append(
                                    {
                                        "role": "assistant",
                                        "tool_calls": call_request
                                    }
                                )
                
            for r in call_response:
                conversation.append(r)
            
            with open("static_storage/conversation.json", "w", encoding="utf-8") as f:
                json.dump(conversation, f, indent=4, ensure_ascii=False)
        
        #!a list with every tool name called in this turn
        print(YELLOW, tools_called, RESET)
        print(RED, plain_text, RESET)
        return tools_called
    
    # error handling per whole response
    except Exception as e:
        print(RED, e , RESET)
        error_msg = f"Critical {str(e )}"
        bot.send_message(prefs.TST_chat_id, f"üî¥\n```{error_msg}```", parse_mode="Markdown")
        return 1
    
    
    
def update_context():
    context = prefs.get_context()
    try:
        current_datetime = datetime.datetime.now(prefs.timezone).strftime('%H:%M:%S')
        with open("static_storage/conversation.json", "r", encoding="utf-8") as f:
            conversation = json.load(f)
        system_message = {
            'role': 'system',
            'content': f"""Current time: {current_datetime}
            {prefs.system_msg()}
            """
        }
        client.api_key = prefs.open_r_key()
        
        
        query = {
            'role': 'user',
            'content': f"""Current time: {current_datetime}
            –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
            –û–±–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–º–Ω–æ–≥–æ.
            –í –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
                —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã –∏ –µ–µ –∏—Å—Ç–æ—Ä–∏—è.
                –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
                –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                
            –ù–µ –∏–∑–º–µ–Ω—è–π —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç  —Å–∏–ª—å–Ω–æ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, –Ω–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–π –µ–≥–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π. –ù—É–∂–Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–¥–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å=–∫–æ–Ω—Ç–µ—Å–∫—Ç. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ. –ù–µ –æ—Å—Ç–∞–≤–ª—è–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ–æ—Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –°–ª–µ–¥–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º
            
            [–∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π]
            {conversation[len(conversation) // 5:]}
            """
        }
        
        response = client.chat.completions.create(
            model=prefs.MODEL(),
            messages=[system_message, query],
            # tools=tools.TOOLS,
            # tool_choice=tool_choice,
            temperature=prefs.TEMPERATURE,
            frequency_penalty=2
        )
        if response.choices[0].finish_reason == 'error':
            bot.send_message(
                prefs.TST_chat_id,
                f"üîá\n```API Error: {response}```",
                parse_mode="Markdown"
            )
            return "error"
        
        if not response.choices:
            bot.send_message(
                prefs.TST_chat_id,
                f"üîá\n```API Error: {response}```",
                parse_mode="Markdown"
            )
            return "error"
        print(response)
        message = response.choices[0].message
        plain_text = message.content
        if plain_text:
            with open("static_storage/context.txt", "w", encoding="utf-8") as f:
                f.write(plain_text)
            print(f"{GREEN} Context updated {RESET}")
            
    except Exception as e:
        print(RED, e , RESET)
        error_msg = f"Context_failure {str(e )}"
        bot.send_message(prefs.TST_chat_id, f"üî¥\n```{error_msg}```", parse_mode="Markdown")
        return 1
    